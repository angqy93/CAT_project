<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.geometry.Rectangle2D?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Text?>


<VBox alignment="CENTER" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="480.0" prefWidth="300.0" style="-fx-background-radius: 50; -fx-background-color: #FFFFFF;" stylesheets="@../../../styles/cardcontainer.css" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.xplorer.EventCardController">
   <children>
      <ImageView fx:id="imageBox" fitHeight="300.0" fitWidth="300.0" pickOnBounds="true" preserveRatio="true" VBox.vgrow="NEVER">
         <image>
            <Image url="@../../../img/Varsity.png" />
         </image>
         <viewport>
            <Rectangle2D height="160.0" minY="160.0" />
         </viewport>
         <VBox.margin>
            <Insets />
         </VBox.margin>
      </ImageView>
      <Text fx:id="nameText" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-font-size: 30; -fx-text-alignment: center;" styleClass="text" text="&lt;name&gt;" textAlignment="CENTER" wrappingWidth="280.0" />
      <ScrollPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="-Infinity" minWidth="-Infinity" prefHeight="200.0" prefWidth="300.0" style="-fx-border-color: transparent;" VBox.vgrow="ALWAYS">
         <content>
            <VBox maxHeight="1.7976931348623157E308" prefHeight="200.0" prefWidth="300.0" style="-fx-background-color: #FFFFFF;">
               <children>
                  <Text fx:id="dateText" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-text-alignment: center; -fx-font-size: 20;" styleClass="text" text="&lt;date&gt;" textAlignment="CENTER" wrappingWidth="280.0">
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" top="5.0" />
                     </VBox.margin>
                  </Text>
                  <Text fx:id="timeText" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-text-alignment: center; -fx-font-size: 20;" styleClass="text" text="&lt;time&gt;" wrappingWidth="280.0">
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" top="5.0" />
                     </VBox.margin>
                  </Text>
                  <Text fx:id="venueTest" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-text-alignment: center; -fx-font-size: 20;" styleClass="text" text="&lt;venue&gt;" wrappingWidth="280.0">
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" top="5.0" />
                     </VBox.margin>
                  </Text>
                  <Text fx:id="descriptionTest" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-text-alignment: center; -fx-font-size: 20;" styleClass="text" text="Description:" wrappingWidth="280.0">
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" top="5.0" />
                     </VBox.margin>
                  </Text>
                  <Text fx:id="descriptionText" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-text-alignment: center;" text="horPane allows the edges of child nodes to be anchored to an offset from the anchor pane's edges. If the anchor pane has a border and/or padding set, the offsets will be measured from the inside edge of those insets.AnchorPane lays out each managed child regardless of the child's visible property value; unmanaged children are ignored for all layout calculations.AnchorPanes may be styled with backgrounds and borders using CSS. See Region superclass for details.Anchor ConstraintsThe application sets anchor constraints on each child to configure the anchors on one or more sides. If a child is anchored on opposite sides (and is resizable), the anchor pane will resize it to maintain both offsets, otherwise the anchor pane will resize it to its preferred size. If in the former case (anchored on opposite sides) and the child is not resizable, then only the top/left anchor will be honored. AnchorPane provides a static method for setting each anchor constraint.ConstraintTypeDescriptiontopAnchordoubledistance from the anchor pane's top insets to the child's top edge.leftAnchordoubledistance from the anchor pane's left insets to the child's left edge.bottomAnchordoubledistance from the anchor pane's bottom insets to the child's bottom edge.rightAnchordoubledistance from the anchor pane's right insets to the child's right edge.AnchorPane Example:     AnchorPane anchorPane = new AnchorPane();     // List should stretch as anchorPane is resized     ListView list = new ListView();     AnchorPane.setTopAnchor(list, 10.0);     AnchorPane.setLeftAnchor(list, 10.0);     AnchorPane.setRightAnchor(list, 65.0);     // Button will float on right edge     Button button = new Button(&quot;Add&quot;);     AnchorPane.setTopAnchor(button, 10.0);     AnchorPane.setRightAnchor(button, 10.0);     anchorPane.getChildren().addAll(list, button); Resizable RangeAn anchor pane's parent will resize the anchor pane within the anchor pane's resizable range during layout. By default the anchor pane computes this range based on its content as outlined in the table below.widthheightminimumleft/right insets plus width required to display children anchored at left/right with at least their min widthstop/bottom insets plus height required to display children anchored at top/bottom with at least their min heightspreferredleft/right insets plus width required to display children anchored at left/right with at least their pref widthstop/bottom insets plus height required to display children anchored at top/bottom with at least their pref heightsmaximumDouble.MAX_VALUEDouble.MAX_VALUEAn anchor pane's unbounded maximum width and height are an indication to the parent that it may be resized beyond its preferred size to fill whatever space is assigned to it.AnchorPane provides properties for setting the size range directly. These properties default to the sentinel value Region.USE_COMPUTED_SIZE, however the application may set them to other values as needed:     anchorPane.setPrefSize(300, 300); Applications may restore the computed values by setting these properties back to Region.USE_COMPUTED_SIZE.AnchorPane does not clip its content by default, so it is possible that childrens' bounds may extend outside its own bounds if the anchor pane is resized smaller than its preferred size.Since:JavaFX 2.0Property SummaryProperties inherited from class javafx.scene.layout.Regionbackground, border, cacheShape, centerShape, height, insets, maxHeight, maxWidth, minHeight, minWidth, opaqueInsets, padding, prefHeight, prefWidth, scaleShape, shape, snapToPixel, widthProperties inherited from class javafx.scene.ParentneedsLayoutProperties inherited from class javafx.scene.NodeaccessibleHelp, accessibleRoleDescription, accessibleRole, accessibleText, blendMode, boundsInLocal, boundsInParent, cacheHint, cache, clip, cursor, depthTest, disabled, disable, effectiveNodeOrientation, effect, eventDispatcher, focused, focusTraversable, hover, id, inputMethodRequests, layoutBounds, layoutX, layoutY, localToParentTransform, localToSceneTransform, managed, mouseTransparent, nodeOrientation, onContextMenuRequested, onDragDetected, onDragDone, onDragDropped, onDragEntered, onDragExited, onDragOver, onInputMethodTextChanged, onKeyPressed, onKeyReleased, onKeyTyped, onMouseClicked, onMouseDragEntered, onMouseDragExited, onMouseDragged, onMouseDragOver, onMouseDragReleased, onMouseEntered, onMouseExited, onMouseMoved, onMousePressed, onMouseReleased, onRotate, onRotationFinished, onRotationStarted, onScrollFinished, onScroll, onScrollStarted, onSwipeDown, onSwipeLeft, onSwipeRight, onSwipeUp, onTouchMoved, onTouchPressed, onTouchReleased, onTouchStationary, onZoomFinished, onZoom, onZoomStarted, opacity, parent, pickOnBounds, pressed, rotate, rotationAxis, scaleX, scaleY, scaleZ, scene, style, translateX, translateY, translateZ, visibleField SummaryFields inherited from class javafx.scene.layout.RegionUSE_COMPUTED_SIZE, USE_PREF_SIZEFields inherited from class javafx.scene.NodeBASELINE_OFFSET_SAME_AS_HEIGHTConstructor SummaryConstructorsConstructor and DescriptionAnchorPane()Creates an AnchorPane layout.AnchorPane(Node... children)Creates an AnchorPane layout with the given children.Method SummaryAll MethodsStatic MethodsInstance MethodsConcrete MethodsModifier and TypeMethod and Descriptionstatic voidclearConstraints(Node child)" wrappingWidth="280.0">
                     <VBox.margin>
                        <Insets left="10.0" right="10.0" />
                     </VBox.margin>
                  </Text>
               </children>
               <opaqueInsets>
                  <Insets />
               </opaqueInsets>
            </VBox>
         </content>
      </ScrollPane>
   </children>
</VBox>
